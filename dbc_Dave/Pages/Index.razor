@page "/"

@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json.Serialization
@using System.Linq
@using Newtonsoft.Json;
@using dbc_Dave.Data;
@using dbc_Dave.Data.Models;
@using dbc_Dave.Services
@using System.Text
@using System.Web
@using System.Threading
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


@attribute [Authorize]


@inject IJSRuntime JSRuntime
@inject IOpenAI openAiApi
@inject IRedisService redis
@inject Utility Utility
@inject NavigationManager NavManager

@inject AuthenticationStateProvider AuthenticationStateProvider

@code {



    public string? UserName;
    public List<string> Queries = new List<string>();
    public string currentQuery = "New...";
    

    private string newmessageid = "newmessage";

    private string systemrolename = "system";
    private bool ShowSystemTextarea = true;
    private string sysprmptText =
        "A System Prompt is like setting the stage, enter the overall theme of what you want the AI to behave as. Use 'Act as '\n" +
        "Act as a professional gardener advising on plant care.\n" +
        "Act as a psychologist providing strategies for stress management.\n" +
        "Act as a sleep expert giving tips for better sleep.";

    public string? errorMessage;
    public string systemPrompt = "";
    public string systempromptid = "sysprmpt";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        UserName = user.Identity?.Name;

        messages = await redis.GetOrCreateMessagesAsync("current" + UserName);



    }

    public string selectedModel = "gpt-3.5-turbo";
    public string selectedRole = "user";
    public string selectedRoleDisplayName = "You";
    public string message = "";
    public bool isLoading = false;
    public bool isDarkMode = false;
    public int codeBlockCount = 0;
    public ElementReference hiddenInputElement;
    public bool controlEnter = false;
    public CancellationTokenSource? cancellationTokenSource;
    public ElementReference tooltipTarget;
    public List<CustomMessage> messages = new List<CustomMessage>();
    private string? _currentQuery;


    // Used for auto scale textarea
    public ElementReference systemTextareaElement;
    public ElementReference messageTextareaElement;

    public bool showErrorPopup = false;

    public string newQuery = "New...";


}


<AuthorizeView>
    <NotAuthorized>
        <p>You do not have permission to access this page.</p>
    </NotAuthorized>
    <Authorized>
        <div class="page">
            <main>
                <article class="content px-4">

                    <div class="flex-container">
                        <div class="container">
                            <div class="content-wrapper">
                                <div class="flex-lg-row"><img style="display:flex; float:right; height:100px;" src="../assets/dave.png" /></div>

                                @if (showErrorPopup)
                                {
                                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                        <strong>Error!</strong> @errorMessage
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseErrorPopup"></button>
                                    </div>
                                }
                                <div class="form-group">
                                    <div class="flex flex-column justify-content-center" style="margin-bottom:20px;">
                                        <label for="systemPrompt">C:\Users\System Prompt> @currentQuery</label>
                                        <!-- Button -->
                                        <button id="toggleButton" class="btn btn-primary" onclick="showGrid()">Load</button>
                                        <button class="btn btn-new" @onclick="() => GetQuery(newQuery)">New...</button>
                                        <!-- Grid of cards hidden by default -->
                                        <div class="row d-none p-5" id="cardGrid">
                                            @if (redis.GetKeys(UserName).Any())
                                            {
                                                foreach (string option in redis.GetKeys(UserName).OrderBy(option => option))
                                                {
                                                    <div class="col-lg-4 col-md-6 mb-4">
                                                        <div class="card h-100">
                                                            <div class="card-body d-flex flex-column">
                                                                <h5 class="card-title text-center mb-3">@option</h5>
                                                                <div class="mt-auto">
                                                                    <button class="btn btn-primary d-block mx-auto" @onclick="() => GetQuery(option)"><i class="fa fa-floppy-disk"></i> Load</button>
                                                                    <button class="btn btn-danger d-block mx-auto m-2" @onclick="() => DeleteQuery(option)"><i class="fa fa-trash"></i> Delete</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <p>No saved queries</p>
                                            }
                                        </div>
                                    </div>


                            
                                        <textarea @bind="systemPrompt" type="text" class="form-control add-question" id="@systempromptid"
                                                  placeholder="@sysprmptText"
                                        @onkeyup="async (e) => await UpdateTextAreaHeight(systempromptid)"
                                        @onblur="async (e) => await AddMessage(systemrolename, false)">
                                        </textarea>
                               

                                </div>
                                <div class="chat-container">
                                    @if (messages != null) //if nothing in cache
                                    {
                                        @for (int i = 0; i < messages.Count; i++)
                                        {
                                            string messageid = $"textArea-{i}";
                                            int index = i;
                                            int rowcnt = GetRowCount(messages[index].Content) + 2;
                                            <div class="chat-message">

                                                <div class="label-col">
                                                    @if (@messages[index].Role == "assistant")
                                                    {
                                                        <button class="btn chat-role-label @GetRoleButtonClass(messages[index].Role)" disabled>Dave</button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn chat-role-label @GetRoleButtonClass(messages[index].Role)" disabled><i class="fa-solid fa-cog"></i></button>
                                                    }

                                                </div>

                                                <div class="input-container">
                                                    @if (messages[index].EditMode)
                                                    {
                                                        <textarea class="form-control chat-message-content add-question"
                                                        @bind="messages[index].Content"
                                                        @onblur="() => { messages[index].EditMode = false; UpdateMessage(index); HighlightCodeBlocks(); }" @oninput="async (e) => await UpdateTextAreaHeight(messageid)"
                                                                  id="@messageid" @onfocus="() => messages[index].EditMode = true"></textarea>

                                                    }
                                                    else
                                                    {

                                                        var codeBlockContent = (MarkupString)RenderCodeBlock(messages[index].Content);
                                                        <div style="display: flex; flex-direction: row;">
                                                            <pre class="" style="white-space: pre-wrap; position: relative; padding-right:30px;" @onclick="async (_)=> await ChangeEditMode(index)">
                                                                @codeBlockContent
                                                                                                                                        </pre>

                                                        </div>
                                                    }


                                                </div>
                                                <i class="fa-solid fa-text-slash btn-remove hide" @onclick="(() => RemoveMessage(index))"></i>
                                            </div>
                                        }
                                    }



                                    @if (isLoading)
                                    {
                                        <div class="loader mt-3"></div>
                                    }
                                </div>
                            </div>
                            <div class="bottom-section">
                                <div class="toggle-role-section">
                                    <div class="label-col">
                                        <button @onclick="ToggleRole" class="btn ask-question-lable @GetRoleButtonClass(selectedRole)">@selectedRoleDisplayName</button>
                                    </div>
                                    <div class="input-container">
                                        <textarea @bind="message" type="text" class="form-control add-question" id="@newmessageid" @onblur="async (e) => await AddMessage(selectedRole, false)" @oninput="async (e) => await UpdateTextAreaHeight(newmessageid)" @ref="messageTextareaElement" @onkeydown="HandleKeyDown"></textarea>
                                    </div>
                                </div>
                                <div style="display:flex;flex-direction: column;">
                                    <div class="model-toggle-section">
                                        <div class="input-container">
                                            <label class="switch">
                                                <input type="checkbox" id="model-toggle-switch" @onchange="@(e => ToggleModel(Convert.ToBoolean(e.Value)))">
                                                <span class="slider round"></span>
                                            </label>
                                            <span>@selectedModel</span>
                                        </div>
                                    </div>

                                    @if (isLoading)
                                    {
                                        <button @onclick="CancelReply" class="btn btn-primary mt-3 ml-3 btn-cancel">Cancel</button>
                                    }
                                    else
                                    {
                                        <button @onclick="GetReply" class="btn btn-primary mt-3 ml-3 submit-button" style="background-color: #000;margin-left: 20px;margin-bottom: 5px; font-family: 'Press Start 2P';">Ask Dave</button>
                                        <button @onclick="SaveConfig" class="btn btn-primary mt-3 ml-3 submit-button" style="background-color: #6fbfd9;margin-left: 20px; font-family: 'Press Start 2P';">Save</button>

                                    }

                                </div>
                            </div>
                        </div>
                        <input type="text" id="hiddenInput" style="opacity: 0; height: 0px;" @ref="hiddenInputElement" />

                    </div>

                </article>
            </main>
        </div>
    </Authorized>
</AuthorizeView>








